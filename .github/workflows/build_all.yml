name: Build Binaries

on:
    push:
        branches-ignore:
        - nightly
    pull_request:
        branches-ignore:
        - nightly
    workflow_dispatch:

env:
    # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
    BUILD_TYPE: Release
    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
    build_raspios_bullseye_arm64:
        runs-on: arm64

        steps:
        - uses: actions/checkout@v4

        - name: Create Build Environment
          run: rm -rf ${{runner.workspace}}/build && cmake -E make_directory ${{runner.workspace}}/build
        
        - name: Prepare CMake
          working-directory: ${{runner.workspace}}/build
          run: cmake $GITHUB_WORKSPACE -DOPT_BUILD_BLADERF_SOURCE=ON -DOPT_BUILD_LIMESDR_SOURCE=ON -DOPT_BUILD_SDRPLAY_SOURCE=ON -DOPT_BUILD_NEW_PORTAUDIO_SINK=ON -DOPT_BUILD_M17_DECODER=ON -DOPT_BUILD_USRP_SOURCE=ON -DOPT_BUILD_PERSEUS_SOURCE=ON

        - name: Build
          working-directory: ${{runner.workspace}}/build
          run: make VERBOSE=1 -j3

        - name: Create Dev Archive
          working-directory: ${{runner.workspace}}
          run: sh $GITHUB_WORKSPACE/make_debian_package.sh ./build 'libfftw3-dev, libglfw3-dev, libvolk2-dev, librtaudio-dev' && mv sdrpp_debian_amd64.deb sdrpp_debian_arm64.deb
        
        - name: Save Deb Archive
          uses: actions/upload-artifact@v4
          with:
              name: sdrpp_raspios_bullseye_arm64
              path: ${{runner.workspace}}/sdrpp_debian_arm64.deb


    create_full_archive:
        needs: ['build_raspios_bullseye_arm64']
        runs-on: ubuntu-latest

        steps:
        - name: Download All Builds
          uses: actions/download-artifact@v4

        - name: Create Archive
          run: >
            mkdir sdrpp_all && 
            mv sdrpp_raspios_bullseye_arm64/sdrpp_debian_arm64.deb sdrpp_all/sdrpp_raspios_bullseye_arm64.deb

        - uses: actions/upload-artifact@v4
          with:
            name: sdrpp_all
            path: sdrpp_all/

    update_nightly_release:
        needs: [create_full_archive]
        runs-on: ubuntu-latest
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/arm64' }}

        steps:
        - name: Download All Builds
          uses: actions/download-artifact@v4

        - name: Update Nightly
          run: gh release upload nightly-arm64 sdrpp_all/* -R ${{github.repository}} --clobber

    check_spelling:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v4

        - name: Install codespell
          run: sudo apt update -y && sudo apt install -y codespell
        
        - name: Running codespell
          run: cd $GITHUB_WORKSPACE && codespell -q 2 || true

    check_formatting:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v4
        
        - name: Run check_clang_format
          run: cd $GITHUB_WORKSPACE && chmod +x ./check_clang_format.sh && ./check_clang_format.sh || true
